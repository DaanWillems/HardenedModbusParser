module ModBus;

type ActionCode = enum {
    RC = 0x01,
    RDI = 0x02,
    RHR = 0x03,
    RIR = 0x04,
    WSC = 0x05,
    WSHR = 0x06,
    WMC = 0x0f,
    WMHR = 0x10
};

public type Request = unit {
    transactionID: uint16; 
    protocolID: uint16; 
    length: uint16; 
    unitID: uint8; 
    pdu: PDU &size=self.length-1;
    null_field: bytes &eod &max-size=0;
    on %done { print self; }
} &max-size=253;

type PDU = unit {
    actionCode: int8 &size=1 &convert=ActionCode($$);
    switch ( self.actionCode ) {
        ActionCode::RC    -> rc:   DataRC;
        ActionCode::RDI   -> rdi:  DataRDI;
        ActionCode::RHR   -> rhr:  DataRHR;
        ActionCode::RIR   -> rir:  DataRIR;
        ActionCode::WSC   -> wsc:  DataWSC;
        ActionCode::WSHR  -> wshr: DataWSHR;
        ActionCode::WMC   -> wmc:  DataWMC;
        ActionCode::WMHR  -> wmhr: DataWMHR;
    };
};

type DataRC = unit {
    address: uint16; 
    count: uint16 &requires=($$ < 2001);
};

type DataRDI = unit {
    address: uint16; 
    count: uint16 &requires=($$ < 2001);
};

type DataRHR = unit {
    address: uint16; 
    count: uint16 &requires=($$ < 126);
};

type DataRIR = unit {
    address: uint16; 
    count: uint16 &requires=($$ < 126);
};

type DataWSC = unit {
    address: uint16; 
    count: uint16 &requires=($$ < 65281);
};

type DataWSHR = unit {
    address: uint16; 
    count: uint16;
};

type DataWMHR = unit {
    registerAddress: uint16; 
    registerCount: uint16 &requires=($$ < 124);
    byteCount: uint8 &requires=($$ == self.registerCount*2);
    registerValues: uint16[self.registerCount];
};

type DataWMC = unit {
    registerAddress: uint16; 
    outputQuantity: uint16 &requires=($$ < 1968);
    byteCount: uint8 &requires=($$ == self.outputQuantity);
    registerValues: uint8[self.outputQuantity];
};